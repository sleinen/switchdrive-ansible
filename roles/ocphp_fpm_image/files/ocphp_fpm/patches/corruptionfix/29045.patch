diff --git a/apps/files/appinfo/app.php b/apps/files/appinfo/app.php
index 94360786ac3..31f37ce61c6 100644
--- a/apps/files/appinfo/app.php
+++ b/apps/files/appinfo/app.php
@@ -41,6 +41,9 @@

 \OC::$server->getSearch()->registerProvider('OC\Search\Provider\File', array('apps' => array('files')));

+// instantiate to make sure services get registered
+$app = new \OCA\Files\AppInfo\Application();
+
 $templateManager = \OC_Helper::getFileTemplateManager();
 $templateManager->registerTemplate('text/html', 'core/templates/filetemplates/template.html');
 $templateManager->registerTemplate('application/vnd.oasis.opendocument.presentation', 'core/templates/filetemplates/template.odp');
diff --git a/apps/files/appinfo/application.php b/apps/files/appinfo/application.php
index 593e0533c80..e966e8a8d9f 100644
--- a/apps/files/appinfo/application.php
+++ b/apps/files/appinfo/application.php
@@ -69,6 +69,13 @@ public function __construct(array $urlParams=array()) {
 			);
 		});

+		$container->registerService('OCP\Lock\ILockingProvider', function(IContainer $c)  {
+			return $c->query('ServerContainer')->getLockingProvider();
+		});
+		$container->registerService('OCP\Files\IMimeTypeLoader', function(IContainer $c)  {
+			return $c->query('ServerContainer')->getMimeTypeLoader();
+		});
+
 		/*
 		 * Register capabilities
 		 */
diff --git a/apps/files/appinfo/register_command.php b/apps/files/appinfo/register_command.php
index dad78186c62..8586533f69b 100644
--- a/apps/files/appinfo/register_command.php
+++ b/apps/files/appinfo/register_command.php
@@ -25,8 +25,11 @@
 $userManager = OC::$server->getUserManager();
 $shareManager = \OC::$server->getShareManager();
 $mountManager = \OC::$server->getMountManager();
+$lockingProvider = \OC::$server->getLockingProvider();
+$mimeTypeLoader = \OC::$server->getMimeTypeLoader();
+$config = \OC::$server->getConfig();

 /** @var Symfony\Component\Console\Application $application */
-$application->add(new OCA\Files\Command\Scan($userManager));
+$application->add(new OCA\Files\Command\Scan($userManager, $lockingProvider, $mimeTypeLoader, $config));
 $application->add(new OCA\Files\Command\DeleteOrphanedFiles($dbConnection));
 $application->add(new OCA\Files\Command\TransferOwnership($userManager, $shareManager, $mountManager));
diff --git a/apps/files/command/scan.php b/apps/files/command/scan.php
index 763f038059a..dd59955619a 100644
--- a/apps/files/command/scan.php
+++ b/apps/files/command/scan.php
@@ -37,11 +37,22 @@
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
 use Symfony\Component\Console\Helper\Table;
+use OC\Repair\RepairMismatchFileCachePath;
+use OCP\Lock\ILockingProvider;
+use OCP\Lock\LockedException;
+use OCP\Files\IMimeTypeLoader;
+use OCP\IConfig;

 class Scan extends Base {

 	/** @var IUserManager $userManager */
 	private $userManager;
+	/** @var ILockingProvider */
+	private $lockingProvider;
+	/** @var IMimeTypeLoader */
+	private $mimeTypeLoader;
+	/** @var IConfig */
+	private $config;
 	/** @var float */
 	protected $execTime = 0;
 	/** @var int */
@@ -49,8 +60,16 @@ class Scan extends Base {
 	/** @var int */
 	protected $filesCounter = 0;

-	public function __construct(IUserManager $userManager) {
+	public function __construct(
+		IUserManager $userManager,
+		ILockingProvider $lockingProvider,
+ 		IMimeTypeLoader $mimeTypeLoader,
+		IConfig $config
+	) {
 		$this->userManager = $userManager;
+		$this->lockingProvider = $lockingProvider;
+		$this->mimeTypeLoader = $mimeTypeLoader;
+		$this->config = $config;
 		parent::__construct();
 	}

@@ -88,12 +107,65 @@ protected function configure() {
 				null,
 				InputOption::VALUE_NONE,
 				'will rescan all files of all known users'
+			)
+			->addOption(
+				'repair',
+				null,
+				InputOption::VALUE_NONE,
+				'will repair detached filecache entries (slow)'
 			);
 	}

-	protected function scanFiles($user, $path, $verbose, OutputInterface $output) {
+	/**
+	 * Repair all storages at once
+	 *
+	 * @param OutputInterface $output
+	 */
+	protected function repairAll(OutputInterface $output) {
+		$connection = $this->reconnectToDatabase($output);
+		$repairStep = new RepairMismatchFileCachePath(
+			$connection,
+			$this->mimeTypeLoader
+		);
+		$repairStep->setStorageNumericId(null);
+		$repairStep->setCountOnly(false);
+		$repairStep->run(new ConsoleOutput($output));
+	}
+
+	protected function scanFiles($user, $path, $verbose, OutputInterface $output, $shouldRepair = false) {
 		$connection = $this->reconnectToDatabase($output);
 		$scanner = new \OC\Files\Utils\Scanner($user, $connection, \OC::$server->getLogger());
+
+		if ($shouldRepair) {
+			$scanner->listen('\OC\Files\Utils\Scanner', 'beforeScanStorage', function ($storage) use ($output, $connection) {
+				try {
+					// FIXME: this will lock the storage even if there is nothing to repair
+					$storage->acquireLock('', ILockingProvider::LOCK_EXCLUSIVE, $this->lockingProvider);
+				} catch (LockedException $e) {
+					$output->writeln("\t<error>Storage \"" . $storage->getCache()->getNumericStorageId() . '" cannot be repaired as it is currently in use, please try again later</error>');
+					return;
+				}
+				$stored = false;
+				try {
+					$repairStep = new RepairMismatchFileCachePath(
+						$connection,
+						$this->mimeTypeLoader
+					);
+					$repairStep->setStorageNumericId($storage->getCache()->getNumericStorageId());
+					$repairStep->setCountOnly(false);
+					$repairStep->run();
+				} catch (\Exception $e) {
+					$stored = $e;
+				}
+
+				// Release the lock first
+				$storage->releaseLock('', ILockingProvider::LOCK_EXCLUSIVE, $this->lockingProvider);
+				// Now throw the exception for handling elsewhere
+				if($stored) {
+					throw $stored;
+				}
+			});
+		}
 		# check on each file/folder if there was a user interrupt (ctrl-c) and throw an exception
 		# printout and count
 		if ($verbose) {
@@ -131,7 +203,7 @@ protected function scanFiles($user, $path, $verbose, OutputInterface $output) {
 		}

 		try {
-			$scanner->scan($path);
+			$scanner->scan($path, $shouldRepair);
 		} catch (ForbiddenException $e) {
 			$output->writeln("<error>Home storage for user $user not writable</error>");
 			$output->writeln("Make sure you're running the scan command only as the user the web server runs as");
@@ -144,12 +216,26 @@ protected function scanFiles($user, $path, $verbose, OutputInterface $output) {

 	protected function execute(InputInterface $input, OutputInterface $output) {
 		$inputPath = $input->getOption('path');
+
+		$shouldRepairStoragesIndividually = (bool) $input->getOption('repair');
+
 		if ($inputPath) {
 			$inputPath = '/' . trim($inputPath, '/');
 			list (, $user,) = explode('/', $inputPath, 3);
 			$users = array($user);
 		} else if ($input->getOption('all')) {
-			$users = $this->userManager->search('');
+			// we can only repair all storages in bulk (more efficient) if singleuser or maintenance mode
+			// is enabled to prevent concurrent user access
+			if ($input->getOption('repair') && ($this->config->getSystemValue('singleuser', false) || $this->config->getSystemValue('maintenance', false))) {
+				// repair all storages at once
+				$this->repairAll($output);
+				// don't fix individually
+				$shouldRepairStoragesIndividually = false;
+			} else {
+				$output->writeln("<comment>Repairing every storage individually is slower than repairing in bulk</comment>");
+				$output->writeln("<comment>To repair in bulk, please switch to single user mode first: occ maintenance:singleuser --on</comment>");
+				$users = $this->userManager->search('');
+			}
 		} else {
 			$users = $input->getArgument('user_id');
 		}
@@ -194,9 +280,10 @@ protected function execute(InputInterface $input, OutputInterface $output) {
 			if ($this->userManager->userExists($user)) {
 				# add an extra line when verbose is set to optical separate users
 				if ($verbose) {$output->writeln(""); }
-				$output->writeln("Starting scan for user $user_count out of $users_total ($user)");
+				$r = $shouldRepairStoragesIndividually ? ' (and repair)' : '';
+				$output->writeln("Starting scan$r for user $user_count out of $users_total ($user)");
 				# full: printout data if $verbose was set
-				$this->scanFiles($user, $path, $verbose, $output);
+				$this->scanFiles($user, $path, $verbose, $output, $shouldRepairStoragesIndividually);
 			} else {
 				$output->writeln("<error>Unknown user $user_count $user</error>");
 			}
diff --git a/lib/private/files/utils/scanner.php b/lib/private/files/utils/scanner.php
index e3ef5036bd8..89908df0559 100644
--- a/lib/private/files/utils/scanner.php
+++ b/lib/private/files/utils/scanner.php
@@ -166,6 +166,9 @@ public function scan($dir = '') {
 			if ($storage->instanceOfStorage('OCA\Files_Sharing\ISharedStorage')) {
 				continue;
 			}
+
+			$this->emit('\OC\Files\Utils\Scanner', 'beforeScanStorage', [$storage]);
+
 			$relativePath = $mount->getInternalPath($dir);
 			$scanner = $storage->getScanner();
 			$scanner->setUseTransactions(false);
@@ -200,6 +203,9 @@ public function scan($dir = '') {
 			if (!$isDbLocking) {
 				$this->db->commit();
 			}
+
+			$this->emit('\OC\Files\Utils\Scanner', 'afterScanStorage', [$storage]);
+
 		}
 	}

diff --git a/lib/private/repair.php b/lib/private/repair.php
index 841cd2625a7..de2297ebe67 100644
--- a/lib/private/repair.php
+++ b/lib/private/repair.php
@@ -39,6 +39,7 @@
 use OC\Repair\EncryptionCompatibility;
 use OC\Repair\OldGroupMembershipShares;
 use OC\Repair\RemoveGetETagEntries;
+use OC\Repair\RepairMismatchFileCachePath;
 use OC\Repair\SharePropagation;
 use OC\Repair\SqliteAutoincrement;
 use OC\Repair\DropOldTables;
@@ -109,6 +110,7 @@ public function addStep($repairStep) {
 	public static function getRepairSteps() {
 		return [
 			new RepairMimeTypes(\OC::$server->getConfig()),
+			new RepairMismatchFileCachePath(\OC::$server->getDatabaseConnection(), \OC::$server->getMimeTypeLoader()),
 			new AssetCache(),
 			new FillETags(\OC::$server->getDatabaseConnection()),
 			new CleanTags(\OC::$server->getDatabaseConnection()),
diff --git a/lib/private/repair/repairmismatchfilecachepath.php b/lib/private/repair/repairmismatchfilecachepath.php
new file mode 100644
index 00000000000..7c2cc200882
--- /dev/null
+++ b/lib/private/repair/repairmismatchfilecachepath.php
@@ -0,0 +1,580 @@
+<?php
+/**
+ * @author Vincent Petry <pvince81@owncloud.com>
+ *
+ * @copyright Copyright (c) 2017, ownCloud GmbH
+ * @license AGPL-3.0
+ *
+ * This code is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License, version 3,
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ *
+ */
+
+namespace OC\Repair;
+
+use OC\Hooks\BasicEmitter;
+use OCP\ILogger;
+use Doctrine\DBAL\Platforms\OraclePlatform;
+use Doctrine\DBAL\Platforms\MySqlPlatform;
+use OCP\Files\IMimeTypeLoader;
+use OCP\IDBConnection;
+
+/**
+ * Repairs file cache entry which path do not match the parent-child relationship
+ */
+class RepairMismatchFileCachePath extends BasicEmitter implements \OC\RepairStep {
+
+	const CHUNK_SIZE = 10000;
+
+	/** @var IDBConnection */
+	protected $connection;
+
+	/** @var IMimeTypeLoader */
+	protected $mimeLoader;
+
+	/** @var int */
+	protected $dirMimeTypeId;
+
+	/** @var int */
+	protected $dirMimePartId;
+
+	/** @var int|null */
+	protected $storageNumericId = null;
+
+	/** @var bool */
+	protected $countOnly = true;
+
+	/**
+	 * @param \OCP\IDBConnection $connection
+	 */
+	public function __construct(IDBConnection $connection, IMimeTypeLoader $mimeLoader) {
+		$this->connection = $connection;
+		$this->mimeLoader = $mimeLoader;
+	}
+
+	public function getName() {
+		if ($this->countOnly) {
+			return 'Detect file cache entries with path that does not match parent-child relationships';
+		} else {
+			return 'Repair file cache entries with path that does not match parent-child relationships';
+		}
+	}
+
+	/**
+	 * Sets the numeric id of the storage to process or null to process all.
+	 *
+	 * @param int $storageNumericId numeric id of the storage
+	 */
+	public function setStorageNumericId($storageNumericId) {
+		$this->storageNumericId = $storageNumericId;
+	}
+
+	/**
+	 * Sets whether to actually repair or only count entries
+	 *
+	 * @param bool $countOnly count only
+	 */
+	public function setCountOnly($countOnly) {
+		$this->countOnly = $countOnly;
+	}
+
+	/**
+	 * Fixes the broken entry's path.
+	 *
+	 * @param LogOutput $out repair output
+	 * @param int $fileId file id of the entry to fix
+	 * @param string $wrongPath wrong path of the entry to fix
+	 * @param int $correctStorageNumericId numeric idea of the correct storage
+	 * @param string $correctPath value to which to set the path of the entry
+	 * @return bool true for success
+	 */
+	private function fixEntryPath(LogOutput $out, $fileId, $wrongPath, $correctStorageNumericId, $correctPath) {
+		// delete target if exists
+		$qb = $this->connection->getQueryBuilder();
+		$qb->delete('filecache')
+			->where($qb->expr()->eq('storage', $qb->createNamedParameter($correctStorageNumericId)));
+
+		if ($correctPath === '' && $this->connection->getDatabasePlatform() instanceof OraclePlatform) {
+			$qb->andWhere($qb->expr()->isNull('path'));
+		} else {
+			$qb->andWhere($qb->expr()->eq('path', $qb->createNamedParameter($correctPath)));
+		}
+		$entryExisted = $qb->execute() > 0;
+
+		$qb = $this->connection->getQueryBuilder();
+		$qb->update('filecache')
+			->set('path', $qb->createNamedParameter($correctPath))
+			->set('path_hash', $qb->createNamedParameter(md5($correctPath)))
+			->set('storage', $qb->createNamedParameter($correctStorageNumericId))
+			->where($qb->expr()->eq('fileid', $qb->createNamedParameter($fileId)));
+		$qb->execute();
+
+		$text = "Fixed file cache entry with fileid $fileId, set wrong path \"$wrongPath\" to \"$correctPath\"";
+		if ($entryExisted) {
+			$text = " (replaced an existing entry)";
+		}
+		$out->advance(1, $text);
+	}
+
+	private function addQueryConditionsParentIdWrongPath($qb) {
+		// thanks, VicDeo!
+		if ($this->connection->getDatabasePlatform() instanceof MySqlPlatform) {
+			$concatFunction = $qb->createFunction("CONCAT(fcp.path, '/', fc.name)");
+		} else {
+			$concatFunction = $qb->createFunction("(fcp.`path` || '/' || fc.`name`)");
+		}
+
+		if ($this->connection->getDatabasePlatform() instanceof OraclePlatform) {
+			$emptyPathExpr = $qb->expr()->isNotNull('fcp.path');
+		} else {
+			$emptyPathExpr = $qb->expr()->neq('fcp.path', $qb->expr()->literal(''));
+		}
+
+		$qb
+			->from('filecache', 'fc')
+			->from('filecache', 'fcp')
+			->where($qb->expr()->eq('fc.parent', 'fcp.fileid'))
+			->andWhere(
+				$qb->expr()->orX(
+					$qb->expr()->neq(
+						$qb->createFunction($concatFunction),
+						'fc.path'
+					),
+					$qb->expr()->neq('fc.storage', 'fcp.storage')
+				)
+			)
+			->andWhere($emptyPathExpr)
+			// yes, this was observed in the wild...
+			->andWhere($qb->expr()->neq('fc.fileid', 'fcp.fileid'));
+
+		if ($this->storageNumericId !== null) {
+			// use the target storage of the failed move when filtering
+			$qb->andWhere(
+				$qb->expr()->eq('fc.storage', $qb->createNamedParameter($this->storageNumericId))
+			);
+		}
+	}
+
+	private function addQueryConditionsNonExistingParentIdEntry($qb, $storageNumericId = null) {
+		// Subquery for parent existence
+		$qbe = $this->connection->getQueryBuilder();
+		$qbe->select($qbe->expr()->literal('1'))
+			->from('filecache', 'fce')
+			->where($qbe->expr()->eq('fce.fileid', 'fc.parent'));
+
+		// Find entries to repair
+		// select fc.storage,fc.fileid,fc.parent as "wrongparent",fc.path,fc.etag
+		// and not exists (select 1 from oc_filecache fc2 where fc2.fileid = fc.parent)
+		$qb->select('storage', 'fileid', 'path', 'parent')
+			// from oc_filecache fc
+			->from('filecache', 'fc')
+			// where fc.parent <> -1
+			->where($qb->expr()->neq('fc.parent', $qb->createNamedParameter(-1)))
+			// and not exists (select 1 from oc_filecache fc2 where fc2.fileid = fc.parent)
+			->andWhere(
+				$qb->expr()->orX(
+					$qb->expr()->eq('fc.fileid', 'fc.parent'),
+					$qb->createFunction('NOT EXISTS (' . $qbe->getSQL() . ')')
+				)
+			);
+
+		if ($storageNumericId !== null) {
+			// filter on destination storage of a failed move
+			$qb->andWhere($qb->expr()->eq('fc.storage', $qb->createNamedParameter($storageNumericId)));
+		}
+	}
+
+	private function countResultsToProcessParentIdWrongPath($storageNumericId = null) {
+		$qb = $this->connection->getQueryBuilder();
+		$qb->select($qb->createFunction('COUNT(*)'));
+		$this->addQueryConditionsParentIdWrongPath($qb, $storageNumericId);
+		$results = $qb->execute();
+		$count = $results->fetchColumn(0);
+		$results->closeCursor();
+		return $count;
+	}
+
+	private function countResultsToProcessNonExistingParentIdEntry($storageNumericId = null) {
+		$qb = $this->connection->getQueryBuilder();
+		$qb->select($qb->createFunction('COUNT(*)'));
+		$this->addQueryConditionsNonExistingParentIdEntry($qb, $storageNumericId);
+		$results = $qb->execute();
+		$count = $results->fetchColumn(0);
+		$results->closeCursor();
+		return $count;
+	}
+
+
+	/**
+	 * Outputs a report about storages with wrong path that need repairing in the file cache
+	 */
+	private function reportAffectedStoragesParentIdWrongPath(LogOutput $out) {
+		$qb = $this->connection->getQueryBuilder();
+		$qb->selectDistinct('fc.storage');
+		$this->addQueryConditionsParentIdWrongPath($qb);
+
+		// TODO: max results + paginate ?
+		// TODO: join with oc_storages / oc_mounts to deliver user id ?
+
+		$results = $qb->execute();
+		$rows = $results->fetchAll();
+		$results->closeCursor();
+
+		$storageIds = [];
+		foreach ($rows as $row) {
+			$storageIds[] = $row['storage'];
+		}
+
+		if (!empty($storageIds)) {
+			$out->warning('The file cache contains entries with invalid path values for the following storage numeric ids: ' . implode(' ', $storageIds));
+			$out->warning('Please run `occ files:scan --all --repair` to repair'
+			.'all affected storages or run `occ files:scan userid --repair for '
+			.'each user with affected storages');
+		}
+	}
+
+	/**
+	 * Outputs a report about storages with non existing parents that need repairing in the file cache
+	 */
+	private function reportAffectedStoragesNonExistingParentIdEntry(LogOutput $out) {
+		$qb = $this->connection->getQueryBuilder();
+		$qb->selectDistinct('fc.storage');
+		$this->addQueryConditionsNonExistingParentIdEntry($qb);
+
+		// TODO: max results + paginate ?
+		// TODO: join with oc_storages / oc_mounts to deliver user id ?
+
+		$results = $qb->execute();
+		$rows = $results->fetchAll();
+		$results->closeCursor();
+
+		$storageIds = [];
+		foreach ($rows as $row) {
+			$storageIds[] = $row['storage'];
+		}
+
+		if (!empty($storageIds)) {
+			$out->warning('The file cache contains entries where the parent id does not point to any existing entry for the following storage numeric ids: ' . implode(' ', $storageIds));
+			$out->warning('Please run `occ files:scan --all --repair` to repair all affected storages');
+		}
+	}
+
+	/**
+	 * Repair all entries for which the parent entry exists but the path
+	 * value doesn't match the parent's path.
+	 *
+	 * @param LogOutput $out
+	 * @param int|null $storageNumericId storage to fix or null for all
+	 * @return int[] storage numeric ids that were targets to a move and needs further fixing
+	 */
+	private function fixEntriesWithCorrectParentIdButWrongPath(LogOutput $out, $storageNumericId = null) {
+		$totalResultsCount = 0;
+		$affectedStorages = [$storageNumericId => true];
+
+		// find all entries where the path entry doesn't match the path value that would
+		// be expected when following the parent-child relationship, basically
+		// concatenating the parent's "path" value with the name of the child
+		$qb = $this->connection->getQueryBuilder();
+		$qb->select('fc.storage', 'fc.fileid', 'fc.name')
+			->selectAlias('fc.path', 'path')
+			->selectAlias('fc.parent', 'wrongparentid')
+			->selectAlias('fcp.storage', 'parentstorage')
+			->selectAlias('fcp.path', 'parentpath');
+		$this->addQueryConditionsParentIdWrongPath($qb, $storageNumericId);
+		$qb->setMaxResults(self::CHUNK_SIZE);
+
+		do {
+			$results = $qb->execute();
+			// since we're going to operate on fetched entry, better cache them
+			// to avoid DB lock ups
+			$rows = $results->fetchAll();
+			$results->closeCursor();
+
+			$this->connection->beginTransaction();
+			$lastResultsCount = 0;
+			foreach ($rows as $row) {
+				$wrongPath = $row['path'];
+				$correctPath = $row['parentpath'] . '/' . $row['name'];
+				// make sure the target is on a different subtree
+				if (substr($correctPath, 0, strlen($wrongPath)) === $wrongPath) {
+					// the path based parent entry is referencing one of its own children,
+					// fix the entry's parent id instead
+					// note: fixEntryParent cannot fail to find the parent entry by path
+					// here because the reason we reached this code is because we already
+					// found it
+					$this->fixEntryParent(
+						$out,
+						$row['storage'],
+						$row['fileid'],
+						$row['path'],
+						$row['wrongparentid'],
+						true
+					);
+				} else {
+					$this->fixEntryPath(
+						$out,
+						$row['fileid'],
+						$wrongPath,
+						$row['parentstorage'],
+						$correctPath
+					);
+					// we also need to fix the target storage
+					$affectedStorages[$row['parentstorage']] = true;
+				}
+				$lastResultsCount++;
+			}
+			$this->connection->commit();
+
+			$totalResultsCount += $lastResultsCount;
+
+			// note: this is not pagination but repeating the query over and over again
+			// until all possible entries were fixed
+		} while ($lastResultsCount > 0);
+
+		if ($totalResultsCount > 0) {
+			$out->info("Fixed $totalResultsCount file cache entries with wrong path");
+		}
+
+		return array_keys($affectedStorages);
+	}
+
+	/**
+	 * Gets the file id of the entry. If none exists, create it
+	 * up to the root if needed.
+	 *
+	 * @param int $storageId storage id
+	 * @param string $path path for which to create the parent entry
+	 * @return int file id of the newly created parent
+	 */
+	private function getOrCreateEntry($storageId, $path, $reuseFileId = null) {
+		if ($path === '.') {
+			$path = '';
+		}
+		// find the correct parent
+		$qb = $this->connection->getQueryBuilder();
+		// select fileid as "correctparentid"
+		$qb->select('fileid')
+			// from oc_filecache
+			->from('filecache')
+			// where storage=$storage and path='$parentPath'
+			->where($qb->expr()->eq('storage', $qb->createNamedParameter($storageId)));
+
+
+		if ($path === '' && $this->connection->getDatabasePlatform() instanceof OraclePlatform) {
+			$qb->andWhere($qb->expr()->isNull('path'));
+		} else {
+			$qb->andWhere($qb->expr()->eq('path', $qb->createNamedParameter($path)));
+		}
+		$results = $qb->execute();
+		$rows = $results->fetchAll();
+		$results->closeCursor();
+
+		if (!empty($rows)) {
+			return $rows[0]['fileid'];
+		}
+
+		if ($path !== '') {
+			$parentId = $this->getOrCreateEntry($storageId, dirname($path));
+		} else {
+			// root entry missing, create it
+			$parentId = -1;
+		}
+
+		$qb = $this->connection->getQueryBuilder();
+		$values = [
+			'storage' => $qb->createNamedParameter($storageId),
+			'path' => $qb->createNamedParameter($path),
+			'path_hash' => $qb->createNamedParameter(md5($path)),
+			'name' => $qb->createNamedParameter(basename($path)),
+			'parent' => $qb->createNamedParameter($parentId),
+			'size' => $qb->createNamedParameter(-1),
+			'etag' => $qb->createNamedParameter('zombie'),
+			'mimetype' => $qb->createNamedParameter($this->dirMimeTypeId),
+			'mimepart' => $qb->createNamedParameter($this->dirMimePartId),
+		];
+
+		if ($reuseFileId !== null) {
+			// purpose of reusing the fileid of the parent is to salvage potential
+			// metadata that might have previously been linked to this file id
+			$values['fileid'] = $qb->createNamedParameter($reuseFileId);
+		}
+		$qb->insert('filecache')->values($values);
+		$qb->execute();
+
+		// If we reused the fileid then this is the id to return
+		if($reuseFileId !== null) {
+			// with Oracle, the trigger gets in the way and does not let us specify
+			// a fileid value on insert
+			if ($this->connection->getDatabasePlatform() instanceof OraclePlatform) {
+				$lastFileId = $this->connection->lastInsertId('*PREFIX*filecache');
+				if ($reuseFileId !== $lastFileId) {
+					// use update to set it directly
+					$qb = $this->connection->getQueryBuilder();
+					$qb->update('filecache')
+						->set('fileid', $qb->createNamedParameter($reuseFileId))
+						->where($qb->expr()->eq('fileid', $qb->createNamedParameter($lastFileId)));
+					$qb->execute();
+				}
+			}
+			return $reuseFileId;
+		} else {
+			// Else we inserted a new row with auto generated id, use that
+			return $this->connection->lastInsertId('*PREFIX*filecache');
+		}
+	}
+
+	/**
+	 * Fixes the broken entry's path.
+	 *
+	 * @param LogOutput $out repair output
+	 * @param int $storageId storage id of the entry to fix
+	 * @param int $fileId file id of the entry to fix
+	 * @param string $path path from the entry to fix
+	 * @param int $wrongParentId wrong parent id
+	 * @param bool $parentIdExists true if the entry from the $wrongParentId exists (but is the wrong one),
+	 * false if it doesn't
+	 * @return bool true if the entry was fixed, false otherwise
+	 */
+	private function fixEntryParent(LogOutput $out, $storageId, $fileId, $path, $wrongParentId, $parentIdExists = false) {
+		if (!$parentIdExists) {
+			// if the parent doesn't exist, let us reuse its id in case there is metadata to salvage
+			$correctParentId = $this->getOrCreateEntry($storageId, dirname($path), $wrongParentId);
+		} else {
+			// parent exists and is the wrong one, so recreating would need a new fileid
+			$correctParentId = $this->getOrCreateEntry($storageId, dirname($path));
+		}
+
+		$this->connection->beginTransaction();
+
+		$qb = $this->connection->getQueryBuilder();
+		$qb->update('filecache')
+			->set('parent', $qb->createNamedParameter($correctParentId))
+			->where($qb->expr()->eq('fileid', $qb->createNamedParameter($fileId)));
+		$qb->execute();
+
+		$text = "Fixed file cache entry with fileid $fileId, set wrong parent \"$wrongParentId\" to \"$correctParentId\"";
+		$out->advance(1, $text);
+
+		$this->connection->commit();
+
+		return true;
+	}
+
+	/**
+	 * Repair entries where the parent id doesn't point to any existing entry
+	 * by finding the actual parent entry matching the entry's path dirname.
+	 *
+	 * @param LogOutput $out output
+	 * @param int|null $storageNumericId storage to fix or null for all
+	 * @return int number of results that were fixed
+	 */
+	private function fixEntriesWithNonExistingParentIdEntry(LogOutput $out, $storageNumericId = null) {
+		$qb = $this->connection->getQueryBuilder();
+		$this->addQueryConditionsNonExistingParentIdEntry($qb, $storageNumericId);
+		$qb->setMaxResults(self::CHUNK_SIZE);
+
+		$totalResultsCount = 0;
+		do {
+			$results = $qb->execute();
+			// since we're going to operate on fetched entry, better cache them
+			// to avoid DB lock ups
+			$rows = $results->fetchAll();
+			$results->closeCursor();
+
+			$lastResultsCount = 0;
+			foreach ($rows as $row) {
+				$this->fixEntryParent(
+					$out,
+					$row['storage'],
+					$row['fileid'],
+					$row['path'],
+					$row['parent'],
+					// in general the parent doesn't exist except
+					// for the one condition where parent=fileid
+					$row['parent'] === $row['fileid']
+				);
+				$lastResultsCount++;
+			}
+
+			$totalResultsCount += $lastResultsCount;
+
+			// note: this is not pagination but repeating the query over and over again
+			// until all possible entries were fixed
+		} while ($lastResultsCount > 0);
+
+		if ($totalResultsCount > 0) {
+			$out->info("Fixed $totalResultsCount file cache entries with wrong path");
+		}
+
+		return $totalResultsCount;
+	}
+
+	/**
+	 * Run the repair step
+	 */
+	public function run() {
+
+		$out = new LogOutput(\OC::$server->getLogger());
+
+		$this->dirMimeTypeId = $this->mimeLoader->getId('httpd/unix-directory');
+		$this->dirMimePartId = $this->mimeLoader->getId('httpd');
+
+		if ($this->countOnly) {
+			$this->reportAffectedStoragesParentIdWrongPath($out);
+			$this->reportAffectedStoragesNonExistingParentIdEntry($out);
+		} else {
+			$brokenPathEntries = $this->countResultsToProcessParentIdWrongPath($this->storageNumericId);
+			$brokenParentIdEntries = $this->countResultsToProcessNonExistingParentIdEntry($this->storageNumericId);
+			$out->startProgress($brokenPathEntries + $brokenParentIdEntries);
+
+			$totalFixed = 0;
+
+			/*
+			 * This repair itself might overwrite existing target parent entries and create
+			 * orphans where the parent entry of the parent id doesn't exist but the path matches.
+			 * This needs to be repaired by fixEntriesWithNonExistingParentIdEntry(), this is why
+			 * we need to keep this specific order of repair.
+			 */
+			$affectedStorages = $this->fixEntriesWithCorrectParentIdButWrongPath($out, $this->storageNumericId);
+
+			if ($this->storageNumericId !== null) {
+				foreach ($affectedStorages as $storageNumericId) {
+					$this->fixEntriesWithNonExistingParentIdEntry($out, $storageNumericId);
+				}
+			} else {
+				// just fix all
+				$this->fixEntriesWithNonExistingParentIdEntry($out);
+			}
+			$out->finishProgress();
+			$out->info('');
+		}
+	}
+}
+
+class LogOutput {
+	/**
+	 * @var ILogger
+	 */
+	protected $logger;
+	public function __construct(ILogger $logger) {
+		$this->logger = $logger;
+	}
+	public function info($message) {
+		$this->logger->info($message);
+	}
+	public function finishProgress() {}
+	public function advance() {}
+	public function startProgress() {}
+	public function warning($message) {
+		$this->logger->warning($message);
+	}
+}
\ No newline at end of file
diff --git a/lib/private/server.php b/lib/private/server.php
index 79d8159cc7a..5999ae12fe0 100644
--- a/lib/private/server.php
+++ b/lib/private/server.php
@@ -534,6 +534,7 @@ public function __construct($webRoot, \OC\Config $config) {
 			}
 			return new NoopLockingProvider();
 		});
+		$this->registerAlias('OCP\Lock\ILockingProvider', 'LockingProvider');
 		$this->registerService('MountManager', function () {
 			return new \OC\Files\Mount\Manager();
 		});
@@ -549,6 +550,7 @@ public function __construct($webRoot, \OC\Config $config) {
 				$c->getDatabaseConnection()
 			);
 		});
+		$this->registerAlias('OCP\Files\IMimeTypeLoader', 'MimeTypeLoader');
 		$this->registerService('NotificationManager', function () {
 			return new Manager();
 		});
diff --git a/lib/public/idbconnection.php b/lib/public/idbconnection.php
index 780fcd26364..677b79363b6 100644
--- a/lib/public/idbconnection.php
+++ b/lib/public/idbconnection.php
@@ -90,6 +90,9 @@ public function executeUpdate($query, array $params = array(), array $types = ar

 	/**
 	 * Used to get the id of the just inserted element
+	 * Note: On postgres platform, this will return the last sequence id which
+	 * may not be the id last inserted if you were reinserting a previously
+	 * used auto_increment id.
 	 * @param string $table the name of the table where we inserted the item
 	 * @return int the id of the inserted element
 	 * @since 6.0.0
