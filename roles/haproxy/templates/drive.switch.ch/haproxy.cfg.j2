global
    log         {{ hostvars[groups['elk'][0]].inventory_hostname }} local1
    #log         /dev/log local1

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     6000
    user        root
    group       root
    daemon

    server-state-file {{haproxy_state_file}}

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats level admin

    #ssl-default-bind-ciphers AES128+AESGCM+EECDH+SHA256:AES128+EECDH:AES128+AESGCM+DHE:AES128+EDH:AES256+AESGCM+EECDH:AES256+EECDH:AES256+AESGCM+EDH:AES256+EDH:-SHA:AES128+AESGCM+EECDH+SHA256:AES128+EECDH:AES128+AESGCM+DHE:AES128+EDH:AES256+AESGCM+EECDH:AES256+EECDH:AES256+AESGCM+EDH:AES256+EDH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!3DES:!DSS
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AES:RSA+3DES:!ADH:!AECDH:!MD5:!DSS
    ssl-default-bind-options no-sslv3 no-tls-tickets
    tune.ssl.default-dh-param 2048

    lua-load /etc/haproxy/lua/userToShardLookup.lua


defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull

    option http-server-close
    option                  redispatch
    retries                 3
    timeout http-request    20s
    timeout queue           10m
    timeout connect         20s
    timeout client          1m
    timeout server          10m
    timeout http-keep-alive 10s
    timeout check           20s
    maxconn                 5000

    errorfile 503 /etc/haproxy/503maintenance.html


frontend stats
    bind 0.0.0.0:8443 ssl crt /etc/haproxy/ssl/{{ service_name }}.pem
    stats                   enable
    stats                   auth {{ HAPROXY_USER }}:{{ HAPROXY_PASSWORD }}

frontend internstats
    bind 0.0.0.0:8080
    stats                   enable
    stats                   auth {{ HAPROXY_USER }}:{{ HAPROXY_PASSWORD }}

frontend http
    bind 0.0.0.0:80
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    http-request redirect scheme https if ! letsencrypt-acl ! { ssl_fc }
    use_backend letsencrypt

frontend ldaps
    mode                  tcp
    option                tcplog
    bind                  0.0.0.0:636 ssl crt /etc/haproxy/ssl/{{ service_name }}.pem
    description           LDAP Service
    option                socket-stats
    option                tcpka
    timeout client        5s
    default_backend       ldap_backend

frontend ldap
    mode                  tcp
    option                tcplog
    bind                  0.0.0.0:389
    description           LDAP Service
    option                socket-stats
    option                tcpka
    timeout client        5s
    default_backend       ldap_backend

backend ldap_backend
    {% for host in groups['ldap'] %}
    server {{ hostvars[host].inventory_hostname }} {{ hostvars[host].inventory_hostname }}:389 check fall 1 rise 1 inter 2s
    {% endfor %}

    load-server-state-from-file global

    mode                  tcp
    balance               roundrobin
    option                tcpka
    option                ldap-check
    timeout server        2s
    timeout connect       1s

frontend ssl
    bind 0.0.0.0:443 ssl crt /etc/haproxy/ssl/{{service_name}}.pem
    mode http
    # option httpclose
    option forwardfor

    #########
    # check for desktop or sync clients and send them to their own server group
    acl syncclient hdr_reg(User-Agent) mirall csyncoC
    acl andoidclient hdr_reg(User-Agent) ownCloud-android
    acl iosclient hdr_reg(User-Agent) ownCloud-iOS
    #acl pyocclient hdr_reg(User-Agent) python-requests
    # acl switch src 130.59.0.0/16
    #########
    # webdav / ocs / etc ?
    acl webdav url_beg /remote.php
    acl ocs url_beg /ocs/
    acl has_basic_auth req.hdr(Authorization) -m found

    #########
    # sharding
    acl shard_a01 cook(shard) a01
    acl shard_a02 cook(shard) a02
    acl shard_a03 cook(shard) a03
    acl shard_a04 cook(shard) a04
    acl shard_a05 cook(shard) a05
    acl has_shard_cookie cook(shard) -m found
    acl is_cluster_dom hdr_beg(host) -i drive-backup.switch.ch

    # set shard cookie if not present yet (only for sync clients)
    # commented out -> better do this with php to take load away from haproxy.
    #redirect prefix / set-cookie shard=%[lua.userToShardLookup] if !has_shard_cookie syncclient

    # default for non webdav clients
#    http-request set-header Host a01.drive-backup.switch.ch if is_cluster_dom !has_shard_cookie !webdav
    #http-request set-header Host a01.drive-backup.switch.ch if is_cluster_dom !has_shard_cookie has_basic_auth syncclient
    #http-request set-header Host a01.drive-backup.switch.ch if is_cluster_dom !has_shard_cookie has_basic_auth iosclient

    # webdav client -> let them go to root site where a cookie will be set for them.
    # -> works for syncclients and iosclients
    # special clients not capable of handling cookies
#    http-request lua.userToShardLookup if has_basic_auth !has_shard_cookie webdav !syncclient !iosclient
#    http-request lua.userToShardLookup if has_basic_auth andoidclient
#    http-request lua.userToShardLookup if has_basic_auth ocs
    #http-request lua.userToShardLookup if has_basic_auth pyocclient

    # based on cookie already present
#    http-request set-header Host a01.{{ service_name }} if shard_a01
#    http-request set-header Host a02.{{ service_name }} if shard_a02
#    http-request set-header Host a03.{{ service_name }} if shard_a03
#    http-request set-header Host a04.{{ service_name }} if shard_a04
#    http-request set-header Host a05.{{ service_name }} if shard_a05

    #########
    # session cookie also valid on subdomains:
    #rspirep ^(set-cookie:.*)  "\1; Domain={{ service_name }};"

    #########
    # misc
    http-request del-header Proxy
    reqadd X-Forwarded-Proto:\ https


    #########
    # choose backend

    # use_backend owncloud if !syncclient !switch
    use_backend sync if syncclient  #  switch

    # block if !switch syncclient

    default_backend owncloud



frontend ssl_dev
    bind 0.0.0.0:4443 ssl crt /etc/haproxy/ssl/{{ service_name }}.pem
    reqadd X-Forwarded-Proto:\ https

    default_backend owncloud_dev
    mode http
    option forwardfor


backend owncloud
    mode http
    {% for host in groups['lb'] %}
    # listen {{ daemonname }} {{ hostvars[host].inventory_hostname }}:{{ listenport }}
    {% endfor %}
    balance     roundrobin
    # cookie SRVNAME insert
    option httpchk GET /foo.php

    load-server-state-from-file global

    # http://comments.gmane.org/gmane.comp.web.haproxy/14720, closes
    # NVT: Missing Secure Attribute SSL Cookie Information Disclosure Vulnerability (OID: 1.3.6.1.4.1.25623.1.0.902661)
    acl secure res.hdr(Set-Cookie),lower -m sub secure
    rspirep ^(Set-cookie:.*) \1;\ Secure if ! secure

    {% for host in groups['web'] %}
    {%- if hostvars[host].active -%}
    server {{ hostvars[host].inventory_hostname | regex_replace('.*\.20*([1-9][0-9]*)$', 'web\\1') }} {{ hostvars[host].inventory_hostname }}:{{ httpd_port }} cookie {{ hostvars[host].inventory_hostname | regex_replace('.*\.20*([1-9][0-9]*)$', 'web\\1') }} check on-error mark-down fastinter 1500ms
    {% endif -%}
    {% endfor %}

backend owncloud_dev
    mode http
    balance     roundrobin
    # cookie SRVNAME insert
    option httpchk GET /foo.php

    acl secure res.hdr(Set-Cookie),lower -m sub secure
    rspirep ^(Set-cookie:.*) \1;\ Secure if ! secure

    load-server-state-from-file global

    {% for host in groups['dev'] %}
    server {{ hostvars[host].inventory_hostname }} {{ hostvars[host].inventory_hostname }}:{{ httpd_port }} cookie {{ hostvars[host].inventory_hostname }} check on-error mark-down fastinter 1500ms
    {% endfor %}

backend sync
    mode http
    {% for host in groups['lb'] -%}
    # listen {{ daemonname }} {{ hostvars[host].inventory_hostname }}:{{ listenport }}
    {% endfor -%}
    balance     roundrobin
    # cookie SRVNAME insert
    option httpchk GET /foo.php

    # http://comments.gmane.org/gmane.comp.web.haproxy/14720, closes
    # NVT: Missing Secure Attribute SSL Cookie Information Disclosure Vulnerability (OID: 1.3.6.1.4.1.25623.1.0.902661)
    acl secure res.hdr(Set-Cookie),lower -m sub secure
    rspirep ^(Set-cookie:.*) \1;\ Secure if ! secure

    # Default server options:
    #
    # "inter" is normal check interval for each server
    # "downinter" is check interval for server marked down
    # "fastinter" is check interval for a server in transition between up/down
    # "rise 4" means consider owncloud up after 4 successful health checks
    # "fall 2" means consider owncloud instance down after two failed health checks
    # "on-error mark-down error-limit 5" means after 5 connection errors,
    #     immediately mark node as down and enter fastinter state for checks.

    load-server-state-from-file global

    # fullconn should be a bit less than number of server * maxconn
    #fullconn 1300
    # maxconn depends on {php_config.max_php_processes}
    #default-server inter 3000 downinter 20000 fastinter 1000 rise 4 fall 10 on-error mark-down error-limit 5 minconn 10 maxconn 150
    default-server inter 3000 downinter 20000 fastinter 1000 rise 4 fall 10 on-error mark-down error-limit 5 minconn 10 maxconn 100

    {% for host in groups['sync'] %}
    {%- if hostvars[host].active -%}
    server {{ hostvars[host].inventory_hostname | regex_replace('.*\.10*([1-9][0-9]*)$', 'sync\\1') }} {{ hostvars[host].inventory_hostname }}:{{ httpd_port }} cookie {{ hostvars[host].inventory_hostname | regex_replace('.*\.10*([1-9][0-9]*)$', 'sync\\1') }} check
    {% endif -%}
    {% endfor %}

backend letsencrypt
    server localhost localhost:8888
