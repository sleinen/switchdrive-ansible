---

- name: Create dirs
  file: path="{{ item }}" state=directory group=root owner=root
  with_items:
    - "/etc/haproxy"
    - "/etc/haproxy/lua"
    - "/etc/haproxy/ssl"
    - "/var/lib/haproxy"
    - "/var/log/haproxy"
  tags:
    - haproxy

- name: haproxy config
  template: src={{ item.src }} dest=/etc/haproxy/{{ item.dest }}
  notify:
    - reload haproxy
  with_items:
  - { src: "{{ service_name }}/haproxy.cfg.j2", dest: "haproxy.cfg"}
  - { src: "503maintenance.html.j2",            dest: "503maintenance.html"}
  tags:
    - config
    - haproxy
    - haconfig

- name: lua stuff
  template: src=lua/{{ item }}.lua dest=/etc/haproxy/lua/{{ item }}.lua
  notify:
    - restart haproxy
  with_items:
    #- lbase64
    #- ldapUserLookup
    - userToShardLookup
  tags:
    - haproxy
    - lua

- name: maps
  template: src={{ service_name }}/{{ item }}.map dest=/etc/haproxy/{{ item }}.map
  notify:
    - restart haproxy
  with_items:
    - domain_shard
    - user_shard
  tags:
    - haproxy
    - map

- name: upload ssl pem if it exists
  copy: content="{{ service_cert[service_name] }}" dest=/etc/haproxy/ssl/{{ service_name }}.pem
  ignore_errors: yes
  notify:
    - restart haproxy
  tags:
    - haproxy
    - config
    - cert
  when: not service_cert[service_name] is none

- name: create self singed certificate (bootstrap letsencrypt)
  command: 'openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout "/etc/haproxy/ssl/{{ service_name }}.key" -out "/etc/haproxy/ssl/{{ service_name }}.crt" -subj "/C=CH/ST=AG/L=ZÃ¼rich/O=none/OU=none/CN={{ service_name }}"'
  args:
    creates: "/etc/haproxy/ssl/{{ service_name }}.crt"
  when: service_cert[service_name] is none
  tags:
    - haproxy
    - cert


- name: create cert for haproxy
  shell: "cat '/etc/haproxy/ssl/{{ service_name }}.crt' '/etc/haproxy/ssl/{{ service_name }}.key' > '/etc/haproxy/ssl/{{service_name}}.pem'"
  args:
    creates: "/etc/haproxy/ssl/{{ service_name }}.pem"
  when: service_cert[service_name] is none
  tags:
     - haproxy
     - cert

- name: haproxy container
  docker_container:
    name: haproxy
    image: "{{haproxy_docker_image}}"
    network_mode: host
    restart_policy: "unless-stopped"
    state: started
    #pull: true
    volumes:
      - "/etc/haproxy:/etc/haproxy"
      - "/var/lib/haproxy:/var/lib/haproxy"
      - "/var/log/haproxy:/var/log/haproxy"
      - "/run/systemd/journal/dev-log:/dev/log"
  tags:
    - haproxy
